/* automatically generated by rust-bindgen */

pub const SOLOUD_ENUMS_SOLOUD_AUTO: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_SOLOUD_SDL1: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_SOLOUD_SDL2: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_SOLOUD_PORTAUDIO: SOLOUD_ENUMS = 3;
pub const SOLOUD_ENUMS_SOLOUD_WINMM: SOLOUD_ENUMS = 4;
pub const SOLOUD_ENUMS_SOLOUD_XAUDIO2: SOLOUD_ENUMS = 5;
pub const SOLOUD_ENUMS_SOLOUD_WASAPI: SOLOUD_ENUMS = 6;
pub const SOLOUD_ENUMS_SOLOUD_ALSA: SOLOUD_ENUMS = 7;
pub const SOLOUD_ENUMS_SOLOUD_JACK: SOLOUD_ENUMS = 8;
pub const SOLOUD_ENUMS_SOLOUD_OSS: SOLOUD_ENUMS = 9;
pub const SOLOUD_ENUMS_SOLOUD_OPENAL: SOLOUD_ENUMS = 10;
pub const SOLOUD_ENUMS_SOLOUD_COREAUDIO: SOLOUD_ENUMS = 11;
pub const SOLOUD_ENUMS_SOLOUD_OPENSLES: SOLOUD_ENUMS = 12;
pub const SOLOUD_ENUMS_SOLOUD_VITA_HOMEBREW: SOLOUD_ENUMS = 13;
pub const SOLOUD_ENUMS_SOLOUD_MINIAUDIO: SOLOUD_ENUMS = 14;
pub const SOLOUD_ENUMS_SOLOUD_NOSOUND: SOLOUD_ENUMS = 15;
pub const SOLOUD_ENUMS_SOLOUD_NULLDRIVER: SOLOUD_ENUMS = 16;
pub const SOLOUD_ENUMS_SOLOUD_BACKEND_MAX: SOLOUD_ENUMS = 17;
pub const SOLOUD_ENUMS_SOLOUD_CLIP_ROUNDOFF: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_SOLOUD_ENABLE_VISUALIZATION: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_SOLOUD_LEFT_HANDED_3D: SOLOUD_ENUMS = 4;
pub const SOLOUD_ENUMS_SOLOUD_NO_FPU_REGISTER_CHANGE: SOLOUD_ENUMS = 8;
pub const SOLOUD_ENUMS_SOLOUD_WAVE_SQUARE: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_SOLOUD_WAVE_SAW: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_SOLOUD_WAVE_SIN: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_SOLOUD_WAVE_TRIANGLE: SOLOUD_ENUMS = 3;
pub const SOLOUD_ENUMS_SOLOUD_WAVE_BOUNCE: SOLOUD_ENUMS = 4;
pub const SOLOUD_ENUMS_SOLOUD_WAVE_JAWS: SOLOUD_ENUMS = 5;
pub const SOLOUD_ENUMS_SOLOUD_WAVE_HUMPS: SOLOUD_ENUMS = 6;
pub const SOLOUD_ENUMS_SOLOUD_WAVE_FSQUARE: SOLOUD_ENUMS = 7;
pub const SOLOUD_ENUMS_SOLOUD_WAVE_FSAW: SOLOUD_ENUMS = 8;
pub const SOLOUD_ENUMS_SOLOUD_RESAMPLER_POINT: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_SOLOUD_RESAMPLER_LINEAR: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_SOLOUD_RESAMPLER_CATMULLROM: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_BASSBOOSTFILTER_WET: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_BASSBOOSTFILTER_BOOST: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_BIQUADRESONANTFILTER_LOWPASS: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_BIQUADRESONANTFILTER_HIGHPASS: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_BIQUADRESONANTFILTER_BANDPASS: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_BIQUADRESONANTFILTER_WET: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_BIQUADRESONANTFILTER_TYPE: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_BIQUADRESONANTFILTER_FREQUENCY: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_BIQUADRESONANTFILTER_RESONANCE: SOLOUD_ENUMS = 3;
pub const SOLOUD_ENUMS_ECHOFILTER_WET: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_ECHOFILTER_DELAY: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_ECHOFILTER_DECAY: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_ECHOFILTER_FILTER: SOLOUD_ENUMS = 3;
pub const SOLOUD_ENUMS_FLANGERFILTER_WET: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_FLANGERFILTER_DELAY: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_FLANGERFILTER_FREQ: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_FREEVERBFILTER_WET: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_FREEVERBFILTER_FREEZE: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_FREEVERBFILTER_ROOMSIZE: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_FREEVERBFILTER_DAMP: SOLOUD_ENUMS = 3;
pub const SOLOUD_ENUMS_FREEVERBFILTER_WIDTH: SOLOUD_ENUMS = 4;
pub const SOLOUD_ENUMS_LOFIFILTER_WET: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_LOFIFILTER_SAMPLERATE: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_LOFIFILTER_BITDEPTH: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_NOISE_WHITE: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_NOISE_PINK: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_NOISE_BROWNISH: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_NOISE_BLUEISH: SOLOUD_ENUMS = 3;
pub const SOLOUD_ENUMS_ROBOTIZEFILTER_WET: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_ROBOTIZEFILTER_FREQ: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_ROBOTIZEFILTER_WAVE: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_SFXR_COIN: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_SFXR_LASER: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_SFXR_EXPLOSION: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_SFXR_POWERUP: SOLOUD_ENUMS = 3;
pub const SOLOUD_ENUMS_SFXR_HURT: SOLOUD_ENUMS = 4;
pub const SOLOUD_ENUMS_SFXR_JUMP: SOLOUD_ENUMS = 5;
pub const SOLOUD_ENUMS_SFXR_BLIP: SOLOUD_ENUMS = 6;
pub const SOLOUD_ENUMS_SPEECH_KW_SAW: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_SPEECH_KW_TRIANGLE: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_SPEECH_KW_SIN: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_SPEECH_KW_SQUARE: SOLOUD_ENUMS = 3;
pub const SOLOUD_ENUMS_SPEECH_KW_PULSE: SOLOUD_ENUMS = 4;
pub const SOLOUD_ENUMS_SPEECH_KW_NOISE: SOLOUD_ENUMS = 5;
pub const SOLOUD_ENUMS_SPEECH_KW_WARBLE: SOLOUD_ENUMS = 6;
pub const SOLOUD_ENUMS_VIC_PAL: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_VIC_NTSC: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_VIC_BASS: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_VIC_ALTO: SOLOUD_ENUMS = 1;
pub const SOLOUD_ENUMS_VIC_SOPRANO: SOLOUD_ENUMS = 2;
pub const SOLOUD_ENUMS_VIC_NOISE: SOLOUD_ENUMS = 3;
pub const SOLOUD_ENUMS_VIC_MAX_REGS: SOLOUD_ENUMS = 4;
pub const SOLOUD_ENUMS_WAVESHAPERFILTER_WET: SOLOUD_ENUMS = 0;
pub const SOLOUD_ENUMS_WAVESHAPERFILTER_AMOUNT: SOLOUD_ENUMS = 1;
pub type SOLOUD_ENUMS = u32;
pub type AlignedFloatBuffer = *mut libc::c_void;
pub type TinyAlignedFloatBuffer = *mut libc::c_void;
pub type Soloud = *mut libc::c_void;
pub type Ay = *mut libc::c_void;
pub type AudioCollider = *mut libc::c_void;
pub type AudioAttenuator = *mut libc::c_void;
pub type AudioSource = *mut libc::c_void;
pub type BassboostFilter = *mut libc::c_void;
pub type BiquadResonantFilter = *mut libc::c_void;
pub type Bus = *mut libc::c_void;
pub type DCRemovalFilter = *mut libc::c_void;
pub type EchoFilter = *mut libc::c_void;
pub type Fader = *mut libc::c_void;
pub type FFTFilter = *mut libc::c_void;
pub type Filter = *mut libc::c_void;
pub type FlangerFilter = *mut libc::c_void;
pub type FreeverbFilter = *mut libc::c_void;
pub type LofiFilter = *mut libc::c_void;
pub type Monotone = *mut libc::c_void;
pub type Noise = *mut libc::c_void;
pub type Openmpt = *mut libc::c_void;
pub type Queue = *mut libc::c_void;
pub type RobotizeFilter = *mut libc::c_void;
pub type Sfxr = *mut libc::c_void;
pub type Speech = *mut libc::c_void;
pub type TedSid = *mut libc::c_void;
pub type Vic = *mut libc::c_void;
pub type Vizsn = *mut libc::c_void;
pub type Wav = *mut libc::c_void;
pub type WaveShaperFilter = *mut libc::c_void;
pub type WavStream = *mut libc::c_void;
pub type File = *mut libc::c_void;
extern "C" {
    pub fn Soloud_destroy(aSoloud: *mut Soloud);
}
extern "C" {
    pub fn Soloud_create() -> *mut Soloud;
}
extern "C" {
    pub fn Soloud_init(aSoloud: *mut Soloud) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_initEx(
        aSoloud: *mut Soloud,
        aFlags: libc::c_uint,
        aBackend: libc::c_uint,
        aSamplerate: libc::c_uint,
        aBufferSize: libc::c_uint,
        aChannels: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_deinit(aSoloud: *mut Soloud);
}
extern "C" {
    pub fn Soloud_getVersion(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_getErrorString(
        aSoloud: *mut Soloud,
        aErrorCode: libc::c_int,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn Soloud_getBackendId(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_getBackendString(aSoloud: *mut Soloud) -> *const libc::c_char;
}
extern "C" {
    pub fn Soloud_getBackendChannels(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_getBackendSamplerate(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_getBackendBufferSize(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_setSpeakerPosition(
        aSoloud: *mut Soloud,
        aChannel: libc::c_uint,
        aX: f32,
        aY: f32,
        aZ: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_getSpeakerPosition(
        aSoloud: *mut Soloud,
        aChannel: libc::c_uint,
        aX: *mut f32,
        aY: *mut f32,
        aZ: *mut f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_play(aSoloud: *mut Soloud, aSound: *mut AudioSource) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_playEx(
        aSoloud: *mut Soloud,
        aSound: *mut AudioSource,
        aVolume: f32,
        aPan: f32,
        aPaused: libc::c_int,
        aBus: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_playClocked(
        aSoloud: *mut Soloud,
        aSoundTime: f64,
        aSound: *mut AudioSource,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_playClockedEx(
        aSoloud: *mut Soloud,
        aSoundTime: f64,
        aSound: *mut AudioSource,
        aVolume: f32,
        aPan: f32,
        aBus: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_play3d(
        aSoloud: *mut Soloud,
        aSound: *mut AudioSource,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_play3dEx(
        aSoloud: *mut Soloud,
        aSound: *mut AudioSource,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
        aVelX: f32,
        aVelY: f32,
        aVelZ: f32,
        aVolume: f32,
        aPaused: libc::c_int,
        aBus: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_play3dClocked(
        aSoloud: *mut Soloud,
        aSoundTime: f64,
        aSound: *mut AudioSource,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_play3dClockedEx(
        aSoloud: *mut Soloud,
        aSoundTime: f64,
        aSound: *mut AudioSource,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
        aVelX: f32,
        aVelY: f32,
        aVelZ: f32,
        aVolume: f32,
        aBus: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_playBackground(aSoloud: *mut Soloud, aSound: *mut AudioSource) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_playBackgroundEx(
        aSoloud: *mut Soloud,
        aSound: *mut AudioSource,
        aVolume: f32,
        aPaused: libc::c_int,
        aBus: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_seek(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aSeconds: f64,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_stop(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint);
}
extern "C" {
    pub fn Soloud_stopAll(aSoloud: *mut Soloud);
}
extern "C" {
    pub fn Soloud_stopAudioSource(aSoloud: *mut Soloud, aSound: *mut AudioSource);
}
extern "C" {
    pub fn Soloud_countAudioSource(aSoloud: *mut Soloud, aSound: *mut AudioSource) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_setFilterParameter(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aFilterId: libc::c_uint,
        aAttributeId: libc::c_uint,
        aValue: f32,
    );
}
extern "C" {
    pub fn Soloud_getFilterParameter(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aFilterId: libc::c_uint,
        aAttributeId: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn Soloud_fadeFilterParameter(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aFilterId: libc::c_uint,
        aAttributeId: libc::c_uint,
        aTo: f32,
        aTime: f64,
    );
}
extern "C" {
    pub fn Soloud_oscillateFilterParameter(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aFilterId: libc::c_uint,
        aAttributeId: libc::c_uint,
        aFrom: f32,
        aTo: f32,
        aTime: f64,
    );
}
extern "C" {
    pub fn Soloud_getStreamTime(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> f64;
}
extern "C" {
    pub fn Soloud_getStreamPosition(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> f64;
}
extern "C" {
    pub fn Soloud_getPause(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_getVolume(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> f32;
}
extern "C" {
    pub fn Soloud_getOverallVolume(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> f32;
}
extern "C" {
    pub fn Soloud_getPan(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> f32;
}
extern "C" {
    pub fn Soloud_getSamplerate(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> f32;
}
extern "C" {
    pub fn Soloud_getProtectVoice(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_getActiveVoiceCount(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_getVoiceCount(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_isValidVoiceHandle(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_getRelativePlaySpeed(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> f32;
}
extern "C" {
    pub fn Soloud_getPostClipScaler(aSoloud: *mut Soloud) -> f32;
}
extern "C" {
    pub fn Soloud_getMainResampler(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_getGlobalVolume(aSoloud: *mut Soloud) -> f32;
}
extern "C" {
    pub fn Soloud_getMaxActiveVoiceCount(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_getLooping(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_getAutoStop(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_getLoopPoint(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> f64;
}
extern "C" {
    pub fn Soloud_setLoopPoint(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint, aLoopPoint: f64);
}
extern "C" {
    pub fn Soloud_setLooping(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aLooping: libc::c_int,
    );
}
extern "C" {
    pub fn Soloud_setAutoStop(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aAutoStop: libc::c_int,
    );
}
extern "C" {
    pub fn Soloud_setMaxActiveVoiceCount(
        aSoloud: *mut Soloud,
        aVoiceCount: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_setInaudibleBehavior(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aMustTick: libc::c_int,
        aKill: libc::c_int,
    );
}
extern "C" {
    pub fn Soloud_setGlobalVolume(aSoloud: *mut Soloud, aVolume: f32);
}
extern "C" {
    pub fn Soloud_setPostClipScaler(aSoloud: *mut Soloud, aScaler: f32);
}
extern "C" {
    pub fn Soloud_setMainResampler(aSoloud: *mut Soloud, aResampler: libc::c_uint);
}
extern "C" {
    pub fn Soloud_setPause(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint, aPause: libc::c_int);
}
extern "C" {
    pub fn Soloud_setPauseAll(aSoloud: *mut Soloud, aPause: libc::c_int);
}
extern "C" {
    pub fn Soloud_setRelativePlaySpeed(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aSpeed: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_setProtectVoice(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aProtect: libc::c_int,
    );
}
extern "C" {
    pub fn Soloud_setSamplerate(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint, aSamplerate: f32);
}
extern "C" {
    pub fn Soloud_setPan(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint, aPan: f32);
}
extern "C" {
    pub fn Soloud_setPanAbsolute(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aLVolume: f32,
        aRVolume: f32,
    );
}
extern "C" {
    pub fn Soloud_setChannelVolume(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aChannel: libc::c_uint,
        aVolume: f32,
    );
}
extern "C" {
    pub fn Soloud_setVolume(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint, aVolume: f32);
}
extern "C" {
    pub fn Soloud_setDelaySamples(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aSamples: libc::c_uint,
    );
}
extern "C" {
    pub fn Soloud_fadeVolume(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aTo: f32,
        aTime: f64,
    );
}
extern "C" {
    pub fn Soloud_fadePan(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint, aTo: f32, aTime: f64);
}
extern "C" {
    pub fn Soloud_fadeRelativePlaySpeed(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aTo: f32,
        aTime: f64,
    );
}
extern "C" {
    pub fn Soloud_fadeGlobalVolume(aSoloud: *mut Soloud, aTo: f32, aTime: f64);
}
extern "C" {
    pub fn Soloud_schedulePause(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint, aTime: f64);
}
extern "C" {
    pub fn Soloud_scheduleStop(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint, aTime: f64);
}
extern "C" {
    pub fn Soloud_oscillateVolume(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aFrom: f32,
        aTo: f32,
        aTime: f64,
    );
}
extern "C" {
    pub fn Soloud_oscillatePan(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aFrom: f32,
        aTo: f32,
        aTime: f64,
    );
}
extern "C" {
    pub fn Soloud_oscillateRelativePlaySpeed(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aFrom: f32,
        aTo: f32,
        aTime: f64,
    );
}
extern "C" {
    pub fn Soloud_oscillateGlobalVolume(aSoloud: *mut Soloud, aFrom: f32, aTo: f32, aTime: f64);
}
extern "C" {
    pub fn Soloud_setGlobalFilter(
        aSoloud: *mut Soloud,
        aFilterId: libc::c_uint,
        aFilter: *mut Filter,
    );
}
extern "C" {
    pub fn Soloud_setVisualizationEnable(aSoloud: *mut Soloud, aEnable: libc::c_int);
}
extern "C" {
    pub fn Soloud_calcFFT(aSoloud: *mut Soloud) -> *mut f32;
}
extern "C" {
    pub fn Soloud_getWave(aSoloud: *mut Soloud) -> *mut f32;
}
extern "C" {
    pub fn Soloud_getApproximateVolume(aSoloud: *mut Soloud, aChannel: libc::c_uint) -> f32;
}
extern "C" {
    pub fn Soloud_getLoopCount(aSoloud: *mut Soloud, aVoiceHandle: libc::c_uint) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_getInfo(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aInfoKey: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn Soloud_createVoiceGroup(aSoloud: *mut Soloud) -> libc::c_uint;
}
extern "C" {
    pub fn Soloud_destroyVoiceGroup(
        aSoloud: *mut Soloud,
        aVoiceGroupHandle: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_addVoiceToGroup(
        aSoloud: *mut Soloud,
        aVoiceGroupHandle: libc::c_uint,
        aVoiceHandle: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_isVoiceGroup(
        aSoloud: *mut Soloud,
        aVoiceGroupHandle: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_isVoiceGroupEmpty(
        aSoloud: *mut Soloud,
        aVoiceGroupHandle: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_update3dAudio(aSoloud: *mut Soloud);
}
extern "C" {
    pub fn Soloud_set3dSoundSpeed(aSoloud: *mut Soloud, aSpeed: f32) -> libc::c_int;
}
extern "C" {
    pub fn Soloud_get3dSoundSpeed(aSoloud: *mut Soloud) -> f32;
}
extern "C" {
    pub fn Soloud_set3dListenerParameters(
        aSoloud: *mut Soloud,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
        aAtX: f32,
        aAtY: f32,
        aAtZ: f32,
        aUpX: f32,
        aUpY: f32,
        aUpZ: f32,
    );
}
extern "C" {
    pub fn Soloud_set3dListenerParametersEx(
        aSoloud: *mut Soloud,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
        aAtX: f32,
        aAtY: f32,
        aAtZ: f32,
        aUpX: f32,
        aUpY: f32,
        aUpZ: f32,
        aVelocityX: f32,
        aVelocityY: f32,
        aVelocityZ: f32,
    );
}
extern "C" {
    pub fn Soloud_set3dListenerPosition(aSoloud: *mut Soloud, aPosX: f32, aPosY: f32, aPosZ: f32);
}
extern "C" {
    pub fn Soloud_set3dListenerAt(aSoloud: *mut Soloud, aAtX: f32, aAtY: f32, aAtZ: f32);
}
extern "C" {
    pub fn Soloud_set3dListenerUp(aSoloud: *mut Soloud, aUpX: f32, aUpY: f32, aUpZ: f32);
}
extern "C" {
    pub fn Soloud_set3dListenerVelocity(
        aSoloud: *mut Soloud,
        aVelocityX: f32,
        aVelocityY: f32,
        aVelocityZ: f32,
    );
}
extern "C" {
    pub fn Soloud_set3dSourceParameters(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
    );
}
extern "C" {
    pub fn Soloud_set3dSourceParametersEx(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
        aVelocityX: f32,
        aVelocityY: f32,
        aVelocityZ: f32,
    );
}
extern "C" {
    pub fn Soloud_set3dSourcePosition(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
    );
}
extern "C" {
    pub fn Soloud_set3dSourceVelocity(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aVelocityX: f32,
        aVelocityY: f32,
        aVelocityZ: f32,
    );
}
extern "C" {
    pub fn Soloud_set3dSourceMinMaxDistance(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aMinDistance: f32,
        aMaxDistance: f32,
    );
}
extern "C" {
    pub fn Soloud_set3dSourceAttenuation(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Soloud_set3dSourceDopplerFactor(
        aSoloud: *mut Soloud,
        aVoiceHandle: libc::c_uint,
        aDopplerFactor: f32,
    );
}
extern "C" {
    pub fn Soloud_mix(aSoloud: *mut Soloud, aBuffer: *mut f32, aSamples: libc::c_uint);
}
extern "C" {
    pub fn Soloud_mixSigned16(
        aSoloud: *mut Soloud,
        aBuffer: *mut libc::c_short,
        aSamples: libc::c_uint,
    );
}
extern "C" {
    pub fn Ay_destroy(aAy: *mut Ay);
}
extern "C" {
    pub fn Ay_create() -> *mut Ay;
}
extern "C" {
    pub fn Ay_setVolume(aAy: *mut Ay, aVolume: f32);
}
extern "C" {
    pub fn Ay_setLooping(aAy: *mut Ay, aLoop: libc::c_int);
}
extern "C" {
    pub fn Ay_setAutoStop(aAy: *mut Ay, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Ay_set3dMinMaxDistance(aAy: *mut Ay, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn Ay_set3dAttenuation(
        aAy: *mut Ay,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Ay_set3dDopplerFactor(aAy: *mut Ay, aDopplerFactor: f32);
}
extern "C" {
    pub fn Ay_set3dListenerRelative(aAy: *mut Ay, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Ay_set3dDistanceDelay(aAy: *mut Ay, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Ay_set3dCollider(aAy: *mut Ay, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Ay_set3dColliderEx(aAy: *mut Ay, aCollider: *mut AudioCollider, aUserData: libc::c_int);
}
extern "C" {
    pub fn Ay_set3dAttenuator(aAy: *mut Ay, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Ay_setInaudibleBehavior(aAy: *mut Ay, aMustTick: libc::c_int, aKill: libc::c_int);
}
extern "C" {
    pub fn Ay_setLoopPoint(aAy: *mut Ay, aLoopPoint: f64);
}
extern "C" {
    pub fn Ay_getLoopPoint(aAy: *mut Ay) -> f64;
}
extern "C" {
    pub fn Ay_setFilter(aAy: *mut Ay, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Ay_stop(aAy: *mut Ay);
}
extern "C" {
    pub fn BassboostFilter_destroy(aBassboostFilter: *mut BassboostFilter);
}
extern "C" {
    pub fn BassboostFilter_getParamCount(aBassboostFilter: *mut BassboostFilter) -> libc::c_int;
}
extern "C" {
    pub fn BassboostFilter_getParamName(
        aBassboostFilter: *mut BassboostFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn BassboostFilter_getParamType(
        aBassboostFilter: *mut BassboostFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn BassboostFilter_getParamMax(
        aBassboostFilter: *mut BassboostFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn BassboostFilter_getParamMin(
        aBassboostFilter: *mut BassboostFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn BassboostFilter_setParams(
        aBassboostFilter: *mut BassboostFilter,
        aBoost: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn BassboostFilter_create() -> *mut BassboostFilter;
}
extern "C" {
    pub fn BiquadResonantFilter_destroy(aBiquadResonantFilter: *mut BiquadResonantFilter);
}
extern "C" {
    pub fn BiquadResonantFilter_getParamCount(
        aBiquadResonantFilter: *mut BiquadResonantFilter,
    ) -> libc::c_int;
}
extern "C" {
    pub fn BiquadResonantFilter_getParamName(
        aBiquadResonantFilter: *mut BiquadResonantFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn BiquadResonantFilter_getParamType(
        aBiquadResonantFilter: *mut BiquadResonantFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn BiquadResonantFilter_getParamMax(
        aBiquadResonantFilter: *mut BiquadResonantFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn BiquadResonantFilter_getParamMin(
        aBiquadResonantFilter: *mut BiquadResonantFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn BiquadResonantFilter_create() -> *mut BiquadResonantFilter;
}
extern "C" {
    pub fn BiquadResonantFilter_setParams(
        aBiquadResonantFilter: *mut BiquadResonantFilter,
        aType: libc::c_int,
        aFrequency: f32,
        aResonance: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Bus_destroy(aBus: *mut Bus);
}
extern "C" {
    pub fn Bus_create() -> *mut Bus;
}
extern "C" {
    pub fn Bus_setFilter(aBus: *mut Bus, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Bus_play(aBus: *mut Bus, aSound: *mut AudioSource) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_playEx(
        aBus: *mut Bus,
        aSound: *mut AudioSource,
        aVolume: f32,
        aPan: f32,
        aPaused: libc::c_int,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_playClocked(
        aBus: *mut Bus,
        aSoundTime: f64,
        aSound: *mut AudioSource,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_playClockedEx(
        aBus: *mut Bus,
        aSoundTime: f64,
        aSound: *mut AudioSource,
        aVolume: f32,
        aPan: f32,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_play3d(
        aBus: *mut Bus,
        aSound: *mut AudioSource,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_play3dEx(
        aBus: *mut Bus,
        aSound: *mut AudioSource,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
        aVelX: f32,
        aVelY: f32,
        aVelZ: f32,
        aVolume: f32,
        aPaused: libc::c_int,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_play3dClocked(
        aBus: *mut Bus,
        aSoundTime: f64,
        aSound: *mut AudioSource,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_play3dClockedEx(
        aBus: *mut Bus,
        aSoundTime: f64,
        aSound: *mut AudioSource,
        aPosX: f32,
        aPosY: f32,
        aPosZ: f32,
        aVelX: f32,
        aVelY: f32,
        aVelZ: f32,
        aVolume: f32,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_setChannels(aBus: *mut Bus, aChannels: libc::c_uint) -> libc::c_int;
}
extern "C" {
    pub fn Bus_setVisualizationEnable(aBus: *mut Bus, aEnable: libc::c_int);
}
extern "C" {
    pub fn Bus_annexSound(aBus: *mut Bus, aVoiceHandle: libc::c_uint);
}
extern "C" {
    pub fn Bus_calcFFT(aBus: *mut Bus) -> *mut f32;
}
extern "C" {
    pub fn Bus_getWave(aBus: *mut Bus) -> *mut f32;
}
extern "C" {
    pub fn Bus_getApproximateVolume(aBus: *mut Bus, aChannel: libc::c_uint) -> f32;
}
extern "C" {
    pub fn Bus_getActiveVoiceCount(aBus: *mut Bus) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_getResampler(aBus: *mut Bus) -> libc::c_uint;
}
extern "C" {
    pub fn Bus_setResampler(aBus: *mut Bus, aResampler: libc::c_uint);
}
extern "C" {
    pub fn Bus_setVolume(aBus: *mut Bus, aVolume: f32);
}
extern "C" {
    pub fn Bus_setLooping(aBus: *mut Bus, aLoop: libc::c_int);
}
extern "C" {
    pub fn Bus_setAutoStop(aBus: *mut Bus, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Bus_set3dMinMaxDistance(aBus: *mut Bus, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn Bus_set3dAttenuation(
        aBus: *mut Bus,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Bus_set3dDopplerFactor(aBus: *mut Bus, aDopplerFactor: f32);
}
extern "C" {
    pub fn Bus_set3dListenerRelative(aBus: *mut Bus, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Bus_set3dDistanceDelay(aBus: *mut Bus, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Bus_set3dCollider(aBus: *mut Bus, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Bus_set3dColliderEx(
        aBus: *mut Bus,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Bus_set3dAttenuator(aBus: *mut Bus, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Bus_setInaudibleBehavior(aBus: *mut Bus, aMustTick: libc::c_int, aKill: libc::c_int);
}
extern "C" {
    pub fn Bus_setLoopPoint(aBus: *mut Bus, aLoopPoint: f64);
}
extern "C" {
    pub fn Bus_getLoopPoint(aBus: *mut Bus) -> f64;
}
extern "C" {
    pub fn Bus_stop(aBus: *mut Bus);
}
extern "C" {
    pub fn DCRemovalFilter_destroy(aDCRemovalFilter: *mut DCRemovalFilter);
}
extern "C" {
    pub fn DCRemovalFilter_create() -> *mut DCRemovalFilter;
}
extern "C" {
    pub fn DCRemovalFilter_setParams(aDCRemovalFilter: *mut DCRemovalFilter) -> libc::c_int;
}
extern "C" {
    pub fn DCRemovalFilter_setParamsEx(
        aDCRemovalFilter: *mut DCRemovalFilter,
        aLength: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn DCRemovalFilter_getParamCount(aDCRemovalFilter: *mut DCRemovalFilter) -> libc::c_int;
}
extern "C" {
    pub fn DCRemovalFilter_getParamName(
        aDCRemovalFilter: *mut DCRemovalFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn DCRemovalFilter_getParamType(
        aDCRemovalFilter: *mut DCRemovalFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn DCRemovalFilter_getParamMax(
        aDCRemovalFilter: *mut DCRemovalFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn DCRemovalFilter_getParamMin(
        aDCRemovalFilter: *mut DCRemovalFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn EchoFilter_destroy(aEchoFilter: *mut EchoFilter);
}
extern "C" {
    pub fn EchoFilter_getParamCount(aEchoFilter: *mut EchoFilter) -> libc::c_int;
}
extern "C" {
    pub fn EchoFilter_getParamName(
        aEchoFilter: *mut EchoFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn EchoFilter_getParamType(
        aEchoFilter: *mut EchoFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn EchoFilter_getParamMax(aEchoFilter: *mut EchoFilter, aParamIndex: libc::c_uint) -> f32;
}
extern "C" {
    pub fn EchoFilter_getParamMin(aEchoFilter: *mut EchoFilter, aParamIndex: libc::c_uint) -> f32;
}
extern "C" {
    pub fn EchoFilter_create() -> *mut EchoFilter;
}
extern "C" {
    pub fn EchoFilter_setParams(aEchoFilter: *mut EchoFilter, aDelay: f32) -> libc::c_int;
}
extern "C" {
    pub fn EchoFilter_setParamsEx(
        aEchoFilter: *mut EchoFilter,
        aDelay: f32,
        aDecay: f32,
        aFilter: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn FFTFilter_destroy(aFFTFilter: *mut FFTFilter);
}
extern "C" {
    pub fn FFTFilter_create() -> *mut FFTFilter;
}
extern "C" {
    pub fn FFTFilter_getParamCount(aFFTFilter: *mut FFTFilter) -> libc::c_int;
}
extern "C" {
    pub fn FFTFilter_getParamName(
        aFFTFilter: *mut FFTFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn FFTFilter_getParamType(
        aFFTFilter: *mut FFTFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn FFTFilter_getParamMax(aFFTFilter: *mut FFTFilter, aParamIndex: libc::c_uint) -> f32;
}
extern "C" {
    pub fn FFTFilter_getParamMin(aFFTFilter: *mut FFTFilter, aParamIndex: libc::c_uint) -> f32;
}
extern "C" {
    pub fn FlangerFilter_destroy(aFlangerFilter: *mut FlangerFilter);
}
extern "C" {
    pub fn FlangerFilter_getParamCount(aFlangerFilter: *mut FlangerFilter) -> libc::c_int;
}
extern "C" {
    pub fn FlangerFilter_getParamName(
        aFlangerFilter: *mut FlangerFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn FlangerFilter_getParamType(
        aFlangerFilter: *mut FlangerFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn FlangerFilter_getParamMax(
        aFlangerFilter: *mut FlangerFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn FlangerFilter_getParamMin(
        aFlangerFilter: *mut FlangerFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn FlangerFilter_create() -> *mut FlangerFilter;
}
extern "C" {
    pub fn FlangerFilter_setParams(
        aFlangerFilter: *mut FlangerFilter,
        aDelay: f32,
        aFreq: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn FreeverbFilter_destroy(aFreeverbFilter: *mut FreeverbFilter);
}
extern "C" {
    pub fn FreeverbFilter_getParamCount(aFreeverbFilter: *mut FreeverbFilter) -> libc::c_int;
}
extern "C" {
    pub fn FreeverbFilter_getParamName(
        aFreeverbFilter: *mut FreeverbFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn FreeverbFilter_getParamType(
        aFreeverbFilter: *mut FreeverbFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn FreeverbFilter_getParamMax(
        aFreeverbFilter: *mut FreeverbFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn FreeverbFilter_getParamMin(
        aFreeverbFilter: *mut FreeverbFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn FreeverbFilter_create() -> *mut FreeverbFilter;
}
extern "C" {
    pub fn FreeverbFilter_setParams(
        aFreeverbFilter: *mut FreeverbFilter,
        aMode: f32,
        aRoomSize: f32,
        aDamp: f32,
        aWidth: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn LofiFilter_destroy(aLofiFilter: *mut LofiFilter);
}
extern "C" {
    pub fn LofiFilter_getParamCount(aLofiFilter: *mut LofiFilter) -> libc::c_int;
}
extern "C" {
    pub fn LofiFilter_getParamName(
        aLofiFilter: *mut LofiFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn LofiFilter_getParamType(
        aLofiFilter: *mut LofiFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn LofiFilter_getParamMax(aLofiFilter: *mut LofiFilter, aParamIndex: libc::c_uint) -> f32;
}
extern "C" {
    pub fn LofiFilter_getParamMin(aLofiFilter: *mut LofiFilter, aParamIndex: libc::c_uint) -> f32;
}
extern "C" {
    pub fn LofiFilter_create() -> *mut LofiFilter;
}
extern "C" {
    pub fn LofiFilter_setParams(
        aLofiFilter: *mut LofiFilter,
        aSampleRate: f32,
        aBitdepth: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Monotone_destroy(aMonotone: *mut Monotone);
}
extern "C" {
    pub fn Monotone_create() -> *mut Monotone;
}
extern "C" {
    pub fn Monotone_setParams(
        aMonotone: *mut Monotone,
        aHardwareChannels: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Monotone_setParamsEx(
        aMonotone: *mut Monotone,
        aHardwareChannels: libc::c_int,
        aWaveform: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Monotone_load(aMonotone: *mut Monotone, aFilename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn Monotone_loadMem(
        aMonotone: *mut Monotone,
        aMem: *const libc::c_uchar,
        aLength: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Monotone_loadMemEx(
        aMonotone: *mut Monotone,
        aMem: *const libc::c_uchar,
        aLength: libc::c_uint,
        aCopy: libc::c_int,
        aTakeOwnership: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Monotone_loadFile(aMonotone: *mut Monotone, aFile: *mut File) -> libc::c_int;
}
extern "C" {
    pub fn Monotone_setVolume(aMonotone: *mut Monotone, aVolume: f32);
}
extern "C" {
    pub fn Monotone_setLooping(aMonotone: *mut Monotone, aLoop: libc::c_int);
}
extern "C" {
    pub fn Monotone_setAutoStop(aMonotone: *mut Monotone, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Monotone_set3dMinMaxDistance(
        aMonotone: *mut Monotone,
        aMinDistance: f32,
        aMaxDistance: f32,
    );
}
extern "C" {
    pub fn Monotone_set3dAttenuation(
        aMonotone: *mut Monotone,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Monotone_set3dDopplerFactor(aMonotone: *mut Monotone, aDopplerFactor: f32);
}
extern "C" {
    pub fn Monotone_set3dListenerRelative(aMonotone: *mut Monotone, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Monotone_set3dDistanceDelay(aMonotone: *mut Monotone, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Monotone_set3dCollider(aMonotone: *mut Monotone, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Monotone_set3dColliderEx(
        aMonotone: *mut Monotone,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Monotone_set3dAttenuator(aMonotone: *mut Monotone, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Monotone_setInaudibleBehavior(
        aMonotone: *mut Monotone,
        aMustTick: libc::c_int,
        aKill: libc::c_int,
    );
}
extern "C" {
    pub fn Monotone_setLoopPoint(aMonotone: *mut Monotone, aLoopPoint: f64);
}
extern "C" {
    pub fn Monotone_getLoopPoint(aMonotone: *mut Monotone) -> f64;
}
extern "C" {
    pub fn Monotone_setFilter(
        aMonotone: *mut Monotone,
        aFilterId: libc::c_uint,
        aFilter: *mut Filter,
    );
}
extern "C" {
    pub fn Monotone_stop(aMonotone: *mut Monotone);
}
extern "C" {
    pub fn Noise_destroy(aNoise: *mut Noise);
}
extern "C" {
    pub fn Noise_create() -> *mut Noise;
}
extern "C" {
    pub fn Noise_setOctaveScale(
        aNoise: *mut Noise,
        aOct0: f32,
        aOct1: f32,
        aOct2: f32,
        aOct3: f32,
        aOct4: f32,
        aOct5: f32,
        aOct6: f32,
        aOct7: f32,
        aOct8: f32,
        aOct9: f32,
    );
}
extern "C" {
    pub fn Noise_setType(aNoise: *mut Noise, aType: libc::c_int);
}
extern "C" {
    pub fn Noise_setVolume(aNoise: *mut Noise, aVolume: f32);
}
extern "C" {
    pub fn Noise_setLooping(aNoise: *mut Noise, aLoop: libc::c_int);
}
extern "C" {
    pub fn Noise_setAutoStop(aNoise: *mut Noise, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Noise_set3dMinMaxDistance(aNoise: *mut Noise, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn Noise_set3dAttenuation(
        aNoise: *mut Noise,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Noise_set3dDopplerFactor(aNoise: *mut Noise, aDopplerFactor: f32);
}
extern "C" {
    pub fn Noise_set3dListenerRelative(aNoise: *mut Noise, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Noise_set3dDistanceDelay(aNoise: *mut Noise, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Noise_set3dCollider(aNoise: *mut Noise, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Noise_set3dColliderEx(
        aNoise: *mut Noise,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Noise_set3dAttenuator(aNoise: *mut Noise, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Noise_setInaudibleBehavior(
        aNoise: *mut Noise,
        aMustTick: libc::c_int,
        aKill: libc::c_int,
    );
}
extern "C" {
    pub fn Noise_setLoopPoint(aNoise: *mut Noise, aLoopPoint: f64);
}
extern "C" {
    pub fn Noise_getLoopPoint(aNoise: *mut Noise) -> f64;
}
extern "C" {
    pub fn Noise_setFilter(aNoise: *mut Noise, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Noise_stop(aNoise: *mut Noise);
}
extern "C" {
    pub fn Openmpt_destroy(aOpenmpt: *mut Openmpt);
}
extern "C" {
    pub fn Openmpt_create() -> *mut Openmpt;
}
extern "C" {
    pub fn Openmpt_load(aOpenmpt: *mut Openmpt, aFilename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn Openmpt_loadMem(
        aOpenmpt: *mut Openmpt,
        aMem: *const libc::c_uchar,
        aLength: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Openmpt_loadMemEx(
        aOpenmpt: *mut Openmpt,
        aMem: *const libc::c_uchar,
        aLength: libc::c_uint,
        aCopy: libc::c_int,
        aTakeOwnership: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Openmpt_loadFile(aOpenmpt: *mut Openmpt, aFile: *mut File) -> libc::c_int;
}
extern "C" {
    pub fn Openmpt_setVolume(aOpenmpt: *mut Openmpt, aVolume: f32);
}
extern "C" {
    pub fn Openmpt_setLooping(aOpenmpt: *mut Openmpt, aLoop: libc::c_int);
}
extern "C" {
    pub fn Openmpt_setAutoStop(aOpenmpt: *mut Openmpt, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Openmpt_set3dMinMaxDistance(
        aOpenmpt: *mut Openmpt,
        aMinDistance: f32,
        aMaxDistance: f32,
    );
}
extern "C" {
    pub fn Openmpt_set3dAttenuation(
        aOpenmpt: *mut Openmpt,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Openmpt_set3dDopplerFactor(aOpenmpt: *mut Openmpt, aDopplerFactor: f32);
}
extern "C" {
    pub fn Openmpt_set3dListenerRelative(aOpenmpt: *mut Openmpt, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Openmpt_set3dDistanceDelay(aOpenmpt: *mut Openmpt, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Openmpt_set3dCollider(aOpenmpt: *mut Openmpt, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Openmpt_set3dColliderEx(
        aOpenmpt: *mut Openmpt,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Openmpt_set3dAttenuator(aOpenmpt: *mut Openmpt, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Openmpt_setInaudibleBehavior(
        aOpenmpt: *mut Openmpt,
        aMustTick: libc::c_int,
        aKill: libc::c_int,
    );
}
extern "C" {
    pub fn Openmpt_setLoopPoint(aOpenmpt: *mut Openmpt, aLoopPoint: f64);
}
extern "C" {
    pub fn Openmpt_getLoopPoint(aOpenmpt: *mut Openmpt) -> f64;
}
extern "C" {
    pub fn Openmpt_setFilter(aOpenmpt: *mut Openmpt, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Openmpt_stop(aOpenmpt: *mut Openmpt);
}
extern "C" {
    pub fn Queue_destroy(aQueue: *mut Queue);
}
extern "C" {
    pub fn Queue_create() -> *mut Queue;
}
extern "C" {
    pub fn Queue_play(aQueue: *mut Queue, aSound: *mut AudioSource) -> libc::c_int;
}
extern "C" {
    pub fn Queue_getQueueCount(aQueue: *mut Queue) -> libc::c_uint;
}
extern "C" {
    pub fn Queue_isCurrentlyPlaying(aQueue: *mut Queue, aSound: *mut AudioSource) -> libc::c_int;
}
extern "C" {
    pub fn Queue_setParamsFromAudioSource(
        aQueue: *mut Queue,
        aSound: *mut AudioSource,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Queue_setParams(aQueue: *mut Queue, aSamplerate: f32) -> libc::c_int;
}
extern "C" {
    pub fn Queue_setParamsEx(
        aQueue: *mut Queue,
        aSamplerate: f32,
        aChannels: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Queue_setVolume(aQueue: *mut Queue, aVolume: f32);
}
extern "C" {
    pub fn Queue_setLooping(aQueue: *mut Queue, aLoop: libc::c_int);
}
extern "C" {
    pub fn Queue_setAutoStop(aQueue: *mut Queue, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Queue_set3dMinMaxDistance(aQueue: *mut Queue, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn Queue_set3dAttenuation(
        aQueue: *mut Queue,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Queue_set3dDopplerFactor(aQueue: *mut Queue, aDopplerFactor: f32);
}
extern "C" {
    pub fn Queue_set3dListenerRelative(aQueue: *mut Queue, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Queue_set3dDistanceDelay(aQueue: *mut Queue, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Queue_set3dCollider(aQueue: *mut Queue, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Queue_set3dColliderEx(
        aQueue: *mut Queue,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Queue_set3dAttenuator(aQueue: *mut Queue, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Queue_setInaudibleBehavior(
        aQueue: *mut Queue,
        aMustTick: libc::c_int,
        aKill: libc::c_int,
    );
}
extern "C" {
    pub fn Queue_setLoopPoint(aQueue: *mut Queue, aLoopPoint: f64);
}
extern "C" {
    pub fn Queue_getLoopPoint(aQueue: *mut Queue) -> f64;
}
extern "C" {
    pub fn Queue_setFilter(aQueue: *mut Queue, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Queue_stop(aQueue: *mut Queue);
}
extern "C" {
    pub fn RobotizeFilter_destroy(aRobotizeFilter: *mut RobotizeFilter);
}
extern "C" {
    pub fn RobotizeFilter_getParamCount(aRobotizeFilter: *mut RobotizeFilter) -> libc::c_int;
}
extern "C" {
    pub fn RobotizeFilter_getParamName(
        aRobotizeFilter: *mut RobotizeFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn RobotizeFilter_getParamType(
        aRobotizeFilter: *mut RobotizeFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn RobotizeFilter_getParamMax(
        aRobotizeFilter: *mut RobotizeFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn RobotizeFilter_getParamMin(
        aRobotizeFilter: *mut RobotizeFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn RobotizeFilter_setParams(
        aRobotizeFilter: *mut RobotizeFilter,
        aFreq: f32,
        aWaveform: libc::c_int,
    );
}
extern "C" {
    pub fn RobotizeFilter_create() -> *mut RobotizeFilter;
}
extern "C" {
    pub fn Sfxr_destroy(aSfxr: *mut Sfxr);
}
extern "C" {
    pub fn Sfxr_create() -> *mut Sfxr;
}
extern "C" {
    pub fn Sfxr_resetParams(aSfxr: *mut Sfxr);
}
extern "C" {
    pub fn Sfxr_loadParams(aSfxr: *mut Sfxr, aFilename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn Sfxr_loadParamsMem(
        aSfxr: *mut Sfxr,
        aMem: *mut libc::c_uchar,
        aLength: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Sfxr_loadParamsMemEx(
        aSfxr: *mut Sfxr,
        aMem: *mut libc::c_uchar,
        aLength: libc::c_uint,
        aCopy: libc::c_int,
        aTakeOwnership: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Sfxr_loadParamsFile(aSfxr: *mut Sfxr, aFile: *mut File) -> libc::c_int;
}
extern "C" {
    pub fn Sfxr_loadPreset(
        aSfxr: *mut Sfxr,
        aPresetNo: libc::c_int,
        aRandSeed: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Sfxr_setVolume(aSfxr: *mut Sfxr, aVolume: f32);
}
extern "C" {
    pub fn Sfxr_setLooping(aSfxr: *mut Sfxr, aLoop: libc::c_int);
}
extern "C" {
    pub fn Sfxr_setAutoStop(aSfxr: *mut Sfxr, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Sfxr_set3dMinMaxDistance(aSfxr: *mut Sfxr, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn Sfxr_set3dAttenuation(
        aSfxr: *mut Sfxr,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Sfxr_set3dDopplerFactor(aSfxr: *mut Sfxr, aDopplerFactor: f32);
}
extern "C" {
    pub fn Sfxr_set3dListenerRelative(aSfxr: *mut Sfxr, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Sfxr_set3dDistanceDelay(aSfxr: *mut Sfxr, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Sfxr_set3dCollider(aSfxr: *mut Sfxr, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Sfxr_set3dColliderEx(
        aSfxr: *mut Sfxr,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Sfxr_set3dAttenuator(aSfxr: *mut Sfxr, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Sfxr_setInaudibleBehavior(aSfxr: *mut Sfxr, aMustTick: libc::c_int, aKill: libc::c_int);
}
extern "C" {
    pub fn Sfxr_setLoopPoint(aSfxr: *mut Sfxr, aLoopPoint: f64);
}
extern "C" {
    pub fn Sfxr_getLoopPoint(aSfxr: *mut Sfxr) -> f64;
}
extern "C" {
    pub fn Sfxr_setFilter(aSfxr: *mut Sfxr, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Sfxr_stop(aSfxr: *mut Sfxr);
}
extern "C" {
    pub fn Speech_destroy(aSpeech: *mut Speech);
}
extern "C" {
    pub fn Speech_create() -> *mut Speech;
}
extern "C" {
    pub fn Speech_setText(aSpeech: *mut Speech, aText: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn Speech_setParams(aSpeech: *mut Speech) -> libc::c_int;
}
extern "C" {
    pub fn Speech_setParamsEx(
        aSpeech: *mut Speech,
        aBaseFrequency: libc::c_uint,
        aBaseSpeed: f32,
        aBaseDeclination: f32,
        aBaseWaveform: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Speech_setVolume(aSpeech: *mut Speech, aVolume: f32);
}
extern "C" {
    pub fn Speech_setLooping(aSpeech: *mut Speech, aLoop: libc::c_int);
}
extern "C" {
    pub fn Speech_setAutoStop(aSpeech: *mut Speech, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Speech_set3dMinMaxDistance(aSpeech: *mut Speech, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn Speech_set3dAttenuation(
        aSpeech: *mut Speech,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Speech_set3dDopplerFactor(aSpeech: *mut Speech, aDopplerFactor: f32);
}
extern "C" {
    pub fn Speech_set3dListenerRelative(aSpeech: *mut Speech, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Speech_set3dDistanceDelay(aSpeech: *mut Speech, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Speech_set3dCollider(aSpeech: *mut Speech, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Speech_set3dColliderEx(
        aSpeech: *mut Speech,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Speech_set3dAttenuator(aSpeech: *mut Speech, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Speech_setInaudibleBehavior(
        aSpeech: *mut Speech,
        aMustTick: libc::c_int,
        aKill: libc::c_int,
    );
}
extern "C" {
    pub fn Speech_setLoopPoint(aSpeech: *mut Speech, aLoopPoint: f64);
}
extern "C" {
    pub fn Speech_getLoopPoint(aSpeech: *mut Speech) -> f64;
}
extern "C" {
    pub fn Speech_setFilter(aSpeech: *mut Speech, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Speech_stop(aSpeech: *mut Speech);
}
extern "C" {
    pub fn TedSid_destroy(aTedSid: *mut TedSid);
}
extern "C" {
    pub fn TedSid_create() -> *mut TedSid;
}
extern "C" {
    pub fn TedSid_load(aTedSid: *mut TedSid, aFilename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn TedSid_loadMem(
        aTedSid: *mut TedSid,
        aMem: *const libc::c_uchar,
        aLength: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn TedSid_loadMemEx(
        aTedSid: *mut TedSid,
        aMem: *const libc::c_uchar,
        aLength: libc::c_uint,
        aCopy: libc::c_int,
        aTakeOwnership: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn TedSid_loadFile(aTedSid: *mut TedSid, aFile: *mut File) -> libc::c_int;
}
extern "C" {
    pub fn TedSid_setVolume(aTedSid: *mut TedSid, aVolume: f32);
}
extern "C" {
    pub fn TedSid_setLooping(aTedSid: *mut TedSid, aLoop: libc::c_int);
}
extern "C" {
    pub fn TedSid_setAutoStop(aTedSid: *mut TedSid, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn TedSid_set3dMinMaxDistance(aTedSid: *mut TedSid, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn TedSid_set3dAttenuation(
        aTedSid: *mut TedSid,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn TedSid_set3dDopplerFactor(aTedSid: *mut TedSid, aDopplerFactor: f32);
}
extern "C" {
    pub fn TedSid_set3dListenerRelative(aTedSid: *mut TedSid, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn TedSid_set3dDistanceDelay(aTedSid: *mut TedSid, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn TedSid_set3dCollider(aTedSid: *mut TedSid, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn TedSid_set3dColliderEx(
        aTedSid: *mut TedSid,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn TedSid_set3dAttenuator(aTedSid: *mut TedSid, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn TedSid_setInaudibleBehavior(
        aTedSid: *mut TedSid,
        aMustTick: libc::c_int,
        aKill: libc::c_int,
    );
}
extern "C" {
    pub fn TedSid_setLoopPoint(aTedSid: *mut TedSid, aLoopPoint: f64);
}
extern "C" {
    pub fn TedSid_getLoopPoint(aTedSid: *mut TedSid) -> f64;
}
extern "C" {
    pub fn TedSid_setFilter(aTedSid: *mut TedSid, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn TedSid_stop(aTedSid: *mut TedSid);
}
extern "C" {
    pub fn Vic_destroy(aVic: *mut Vic);
}
extern "C" {
    pub fn Vic_create() -> *mut Vic;
}
extern "C" {
    pub fn Vic_setModel(aVic: *mut Vic, model: libc::c_int);
}
extern "C" {
    pub fn Vic_getModel(aVic: *mut Vic) -> libc::c_int;
}
extern "C" {
    pub fn Vic_setRegister(aVic: *mut Vic, reg: libc::c_int, value: libc::c_uchar);
}
extern "C" {
    pub fn Vic_getRegister(aVic: *mut Vic, reg: libc::c_int) -> libc::c_uchar;
}
extern "C" {
    pub fn Vic_setVolume(aVic: *mut Vic, aVolume: f32);
}
extern "C" {
    pub fn Vic_setLooping(aVic: *mut Vic, aLoop: libc::c_int);
}
extern "C" {
    pub fn Vic_setAutoStop(aVic: *mut Vic, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Vic_set3dMinMaxDistance(aVic: *mut Vic, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn Vic_set3dAttenuation(
        aVic: *mut Vic,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Vic_set3dDopplerFactor(aVic: *mut Vic, aDopplerFactor: f32);
}
extern "C" {
    pub fn Vic_set3dListenerRelative(aVic: *mut Vic, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Vic_set3dDistanceDelay(aVic: *mut Vic, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Vic_set3dCollider(aVic: *mut Vic, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Vic_set3dColliderEx(
        aVic: *mut Vic,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Vic_set3dAttenuator(aVic: *mut Vic, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Vic_setInaudibleBehavior(aVic: *mut Vic, aMustTick: libc::c_int, aKill: libc::c_int);
}
extern "C" {
    pub fn Vic_setLoopPoint(aVic: *mut Vic, aLoopPoint: f64);
}
extern "C" {
    pub fn Vic_getLoopPoint(aVic: *mut Vic) -> f64;
}
extern "C" {
    pub fn Vic_setFilter(aVic: *mut Vic, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Vic_stop(aVic: *mut Vic);
}
extern "C" {
    pub fn Vizsn_destroy(aVizsn: *mut Vizsn);
}
extern "C" {
    pub fn Vizsn_create() -> *mut Vizsn;
}
extern "C" {
    pub fn Vizsn_setText(aVizsn: *mut Vizsn, aText: *mut libc::c_char);
}
extern "C" {
    pub fn Vizsn_setVolume(aVizsn: *mut Vizsn, aVolume: f32);
}
extern "C" {
    pub fn Vizsn_setLooping(aVizsn: *mut Vizsn, aLoop: libc::c_int);
}
extern "C" {
    pub fn Vizsn_setAutoStop(aVizsn: *mut Vizsn, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Vizsn_set3dMinMaxDistance(aVizsn: *mut Vizsn, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn Vizsn_set3dAttenuation(
        aVizsn: *mut Vizsn,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Vizsn_set3dDopplerFactor(aVizsn: *mut Vizsn, aDopplerFactor: f32);
}
extern "C" {
    pub fn Vizsn_set3dListenerRelative(aVizsn: *mut Vizsn, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Vizsn_set3dDistanceDelay(aVizsn: *mut Vizsn, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Vizsn_set3dCollider(aVizsn: *mut Vizsn, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Vizsn_set3dColliderEx(
        aVizsn: *mut Vizsn,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Vizsn_set3dAttenuator(aVizsn: *mut Vizsn, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Vizsn_setInaudibleBehavior(
        aVizsn: *mut Vizsn,
        aMustTick: libc::c_int,
        aKill: libc::c_int,
    );
}
extern "C" {
    pub fn Vizsn_setLoopPoint(aVizsn: *mut Vizsn, aLoopPoint: f64);
}
extern "C" {
    pub fn Vizsn_getLoopPoint(aVizsn: *mut Vizsn) -> f64;
}
extern "C" {
    pub fn Vizsn_setFilter(aVizsn: *mut Vizsn, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Vizsn_stop(aVizsn: *mut Vizsn);
}
extern "C" {
    pub fn Wav_destroy(aWav: *mut Wav);
}
extern "C" {
    pub fn Wav_create() -> *mut Wav;
}
extern "C" {
    pub fn Wav_load(aWav: *mut Wav, aFilename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn Wav_loadMem(
        aWav: *mut Wav,
        aMem: *const libc::c_uchar,
        aLength: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Wav_loadMemEx(
        aWav: *mut Wav,
        aMem: *const libc::c_uchar,
        aLength: libc::c_uint,
        aCopy: libc::c_int,
        aTakeOwnership: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Wav_loadFile(aWav: *mut Wav, aFile: *mut File) -> libc::c_int;
}
extern "C" {
    pub fn Wav_loadRawWave8(
        aWav: *mut Wav,
        aMem: *mut libc::c_uchar,
        aLength: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Wav_loadRawWave8Ex(
        aWav: *mut Wav,
        aMem: *mut libc::c_uchar,
        aLength: libc::c_uint,
        aSamplerate: f32,
        aChannels: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Wav_loadRawWave16(
        aWav: *mut Wav,
        aMem: *mut libc::c_short,
        aLength: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Wav_loadRawWave16Ex(
        aWav: *mut Wav,
        aMem: *mut libc::c_short,
        aLength: libc::c_uint,
        aSamplerate: f32,
        aChannels: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Wav_loadRawWave(aWav: *mut Wav, aMem: *mut f32, aLength: libc::c_uint) -> libc::c_int;
}
extern "C" {
    pub fn Wav_loadRawWaveEx(
        aWav: *mut Wav,
        aMem: *mut f32,
        aLength: libc::c_uint,
        aSamplerate: f32,
        aChannels: libc::c_uint,
        aCopy: libc::c_int,
        aTakeOwnership: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn Wav_getLength(aWav: *mut Wav) -> f64;
}
extern "C" {
    pub fn Wav_setVolume(aWav: *mut Wav, aVolume: f32);
}
extern "C" {
    pub fn Wav_setLooping(aWav: *mut Wav, aLoop: libc::c_int);
}
extern "C" {
    pub fn Wav_setAutoStop(aWav: *mut Wav, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn Wav_set3dMinMaxDistance(aWav: *mut Wav, aMinDistance: f32, aMaxDistance: f32);
}
extern "C" {
    pub fn Wav_set3dAttenuation(
        aWav: *mut Wav,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn Wav_set3dDopplerFactor(aWav: *mut Wav, aDopplerFactor: f32);
}
extern "C" {
    pub fn Wav_set3dListenerRelative(aWav: *mut Wav, aListenerRelative: libc::c_int);
}
extern "C" {
    pub fn Wav_set3dDistanceDelay(aWav: *mut Wav, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn Wav_set3dCollider(aWav: *mut Wav, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn Wav_set3dColliderEx(
        aWav: *mut Wav,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn Wav_set3dAttenuator(aWav: *mut Wav, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn Wav_setInaudibleBehavior(aWav: *mut Wav, aMustTick: libc::c_int, aKill: libc::c_int);
}
extern "C" {
    pub fn Wav_setLoopPoint(aWav: *mut Wav, aLoopPoint: f64);
}
extern "C" {
    pub fn Wav_getLoopPoint(aWav: *mut Wav) -> f64;
}
extern "C" {
    pub fn Wav_setFilter(aWav: *mut Wav, aFilterId: libc::c_uint, aFilter: *mut Filter);
}
extern "C" {
    pub fn Wav_stop(aWav: *mut Wav);
}
extern "C" {
    pub fn WaveShaperFilter_destroy(aWaveShaperFilter: *mut WaveShaperFilter);
}
extern "C" {
    pub fn WaveShaperFilter_setParams(
        aWaveShaperFilter: *mut WaveShaperFilter,
        aAmount: f32,
    ) -> libc::c_int;
}
extern "C" {
    pub fn WaveShaperFilter_create() -> *mut WaveShaperFilter;
}
extern "C" {
    pub fn WaveShaperFilter_getParamCount(aWaveShaperFilter: *mut WaveShaperFilter) -> libc::c_int;
}
extern "C" {
    pub fn WaveShaperFilter_getParamName(
        aWaveShaperFilter: *mut WaveShaperFilter,
        aParamIndex: libc::c_uint,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn WaveShaperFilter_getParamType(
        aWaveShaperFilter: *mut WaveShaperFilter,
        aParamIndex: libc::c_uint,
    ) -> libc::c_uint;
}
extern "C" {
    pub fn WaveShaperFilter_getParamMax(
        aWaveShaperFilter: *mut WaveShaperFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn WaveShaperFilter_getParamMin(
        aWaveShaperFilter: *mut WaveShaperFilter,
        aParamIndex: libc::c_uint,
    ) -> f32;
}
extern "C" {
    pub fn WavStream_destroy(aWavStream: *mut WavStream);
}
extern "C" {
    pub fn WavStream_create() -> *mut WavStream;
}
extern "C" {
    pub fn WavStream_load(
        aWavStream: *mut WavStream,
        aFilename: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn WavStream_loadMem(
        aWavStream: *mut WavStream,
        aData: *const libc::c_uchar,
        aDataLen: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn WavStream_loadMemEx(
        aWavStream: *mut WavStream,
        aData: *const libc::c_uchar,
        aDataLen: libc::c_uint,
        aCopy: libc::c_int,
        aTakeOwnership: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn WavStream_loadToMem(
        aWavStream: *mut WavStream,
        aFilename: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn WavStream_loadFile(aWavStream: *mut WavStream, aFile: *mut File) -> libc::c_int;
}
extern "C" {
    pub fn WavStream_loadFileToMem(aWavStream: *mut WavStream, aFile: *mut File) -> libc::c_int;
}
extern "C" {
    pub fn WavStream_getLength(aWavStream: *mut WavStream) -> f64;
}
extern "C" {
    pub fn WavStream_setVolume(aWavStream: *mut WavStream, aVolume: f32);
}
extern "C" {
    pub fn WavStream_setLooping(aWavStream: *mut WavStream, aLoop: libc::c_int);
}
extern "C" {
    pub fn WavStream_setAutoStop(aWavStream: *mut WavStream, aAutoStop: libc::c_int);
}
extern "C" {
    pub fn WavStream_set3dMinMaxDistance(
        aWavStream: *mut WavStream,
        aMinDistance: f32,
        aMaxDistance: f32,
    );
}
extern "C" {
    pub fn WavStream_set3dAttenuation(
        aWavStream: *mut WavStream,
        aAttenuationModel: libc::c_uint,
        aAttenuationRolloffFactor: f32,
    );
}
extern "C" {
    pub fn WavStream_set3dDopplerFactor(aWavStream: *mut WavStream, aDopplerFactor: f32);
}
extern "C" {
    pub fn WavStream_set3dListenerRelative(
        aWavStream: *mut WavStream,
        aListenerRelative: libc::c_int,
    );
}
extern "C" {
    pub fn WavStream_set3dDistanceDelay(aWavStream: *mut WavStream, aDistanceDelay: libc::c_int);
}
extern "C" {
    pub fn WavStream_set3dCollider(aWavStream: *mut WavStream, aCollider: *mut AudioCollider);
}
extern "C" {
    pub fn WavStream_set3dColliderEx(
        aWavStream: *mut WavStream,
        aCollider: *mut AudioCollider,
        aUserData: libc::c_int,
    );
}
extern "C" {
    pub fn WavStream_set3dAttenuator(aWavStream: *mut WavStream, aAttenuator: *mut AudioAttenuator);
}
extern "C" {
    pub fn WavStream_setInaudibleBehavior(
        aWavStream: *mut WavStream,
        aMustTick: libc::c_int,
        aKill: libc::c_int,
    );
}
extern "C" {
    pub fn WavStream_setLoopPoint(aWavStream: *mut WavStream, aLoopPoint: f64);
}
extern "C" {
    pub fn WavStream_getLoopPoint(aWavStream: *mut WavStream) -> f64;
}
extern "C" {
    pub fn WavStream_setFilter(
        aWavStream: *mut WavStream,
        aFilterId: libc::c_uint,
        aFilter: *mut Filter,
    );
}
extern "C" {
    pub fn WavStream_stop(aWavStream: *mut WavStream);
}
pub type AudioSourceInstance3dData = libc::c_void;
extern "C" {
    pub fn AudioSourceInstance3dData_new(as_: *mut AudioSource) -> *mut AudioSourceInstance3dData;
}
extern "C" {
    pub fn AudioSourceInstance3dData_delete(inst: *mut AudioSourceInstance3dData);
}
extern "C" {
    pub fn AudioCollider_new() -> AudioCollider;
}
extern "C" {
    pub fn AudioCollider_set_handler(
        self_: AudioCollider,
        handler: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *mut Soloud,
                arg2: *mut AudioSourceInstance3dData,
                arg3: libc::c_int,
                arg4: *mut libc::c_void,
            ) -> f32,
        >,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn AudioCollider_delete(arg1: AudioCollider);
}
extern "C" {
    pub fn AudioAttenuator_new() -> AudioAttenuator;
}
extern "C" {
    pub fn AudioAttenuator_set_handler(
        self_: AudioAttenuator,
        handler: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: f32,
                arg2: f32,
                arg3: f32,
                arg4: f32,
                arg5: *mut libc::c_void,
            ) -> f32,
        >,
        data: *mut libc::c_void,
    );
}
extern "C" {
    pub fn AudioAttenuator_delete(arg1: AudioAttenuator);
}
